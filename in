#!/usr/bin/python3

# This file is part of concourse-lp-livefs-resource
#
# Copyright 2023 Canonical Ltd.
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License version 3, as published by
# the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
# SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import json
import os
import requests
from urllib.parse import urlparse
from shutil import copyfileobj
import lputils

payload = json.load(sys.stdin)

src = payload["source"]
ref = payload["version"]["ref"]
params = payload["params"]
output = sys.argv[1]

livefs = src.get("livefs")
arch = src.get("arch", "amd64")
oauth_consumer_key = src.get("oauth_consumer_key")
oauth_token = src.get("oauth_token")
oauth_token_secret = src.get("oauth_token_secret")

download_artifacts = params.get("download_artifacts", default=False)

owner, _, distro, series, name = livefs.split("/")

if owner.startswith("~"):
    owner = owner[1:]

lp, auth = lputils.login_with_oauth(oauth_consumer_key, oauth_token, oauth_token_secret)
distro = lp.distributions[distro]
series = distro.getSeries(name_or_version=series)

build = lp.load(ref)

if download_artifacts:
    files = build.getFileUrls()
    os.makedirs(output, exist_ok=True)

    failed = 0
    for file in files:
        filename = urlparse(file).path.split("/")[-1]
        print(f"Downloading: {filename}", file=sys.stderr)
        with requests.get(file, stream=True, auth=auth) as g:
            if not g.ok:
                print(f"ERROR {filename}: {g.reason}", file=sys.stderr)
                failed += 1
                continue

            with open(os.path.join(output, filename), "wb") as f:
                copyfileobj(g.raw, f)

    if failed != 0:
        print(f"ERROR: {failed} file(s) failed to download.", file=sys.stderr)
        exit(1)

result = {
    "version": {"ref": str(build)},
    "metadata": {"name": "link", "value": build.web_link},
}

json.dump(result, sys.stdout)
print()
