#!/usr/bin/python3

import sys
import json
import lputils

payload = json.load(sys.stdin)

cur_version = 0
src = payload["source"]
ver = payload.get("version")
if ver != None:
    ref = ver["ref"]
    cur_version = int(str(ref).split("/")[-1])

livefs = src.get("livefs")
arch = src.get("arch", "amd64")
oauth_token = src.get("oauth_token")
oauth_token_secret = src.get("oauth_token_secret")

owner, _, distro, series, name = livefs.split("/")

if owner.startswith("~"):
    owner = owner[1:]

lp, auth = lputils.login_with_oauth(oauth_token, oauth_token_secret)
distro = lp.distributions[distro]
series = distro.getSeries(name_or_version=series)

f = lp.livefses.getByName(distro_series=series, owner=lp.people[owner], name=name)


result = [
    {"ref": str(entry)}
    for entry in f.completed_builds_collection
    if entry.buildstate == "Successfully built"
    and int(str(entry).split("/")[-1]) >= cur_version
]

if cur_version == 0:
    # concourse ci doc:
    # (version) will be omitted from the first request, in which case the
    # resource should return the current version (not every version since the
    # resource's inception).
    result = result[0:1]

json.dump(result, sys.stdout)
print()
